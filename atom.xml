<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Captain's Log]]></title>
  <link href="http://trekkie4life.github.io/atom.xml" rel="self"/>
  <link href="http://trekkie4life.github.io/"/>
  <updated>2014-02-10T08:11:24-08:00</updated>
  <id>http://trekkie4life.github.io/</id>
  <author>
    <name><![CDATA[Armando Reed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Weekend Review]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/09/weekend-review/"/>
    <updated>2014-02-09T20:12:55-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/09/weekend-review</id>
    <content type="html"><![CDATA[<p>Sunday morning errands to get some food for the first couple days</p>

<p>11:00am &ndash; Arrive</p>

<p>OOP (Object Oriented Programming)</p>

<p>Reading Practical Object Oriented Design for Ruby &ndash; affectionately referred to as &ldquo;POODR&rdquo; (pooh-der).</p>

<p>super in inheritance
passing an argument into super so the Superclass receieves it.</p>

<p>9:30pm &ndash; Depart</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DBC-Hackathon]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/08/dbc-hackathon/"/>
    <updated>2014-02-08T11:53:39-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/08/dbc-hackathon</id>
    <content type="html"><![CDATA[<p>First off, let me say, this was a priceless experience. If you have the choice to do some challenges or go to a DBC Hackathon as a boot&hellip; GO TO THE HACKATHON! You will be able to participate and contribute and you&rsquo;ll be exposed to so many things. I just finished Phase 1 &ndash; Week 2, and I was still able to make a substantial amount of meaningful input. I loved it.</p>

<h4><strong>8:45am &ndash; Arrive</strong></h4>

<p>After app pitches, we pick which one interests us and converge.  Our team? 5 people: 2 DBC alums and 3 (that includes myself) Phase 1 students.</p>

<h4>Our goal?</h4>

<p>I should preface this by saying the Phase 1 students have no JavaScript experience, vanilla or otherwise.</p>

<p>Use JS to build a 9 x 9 board of cells. Randomly generate  (horizontal/vertical)unions between the cells.</p>

<p>Make a Dynamic Connectivity algorithm to see if there is a path that will connect two points, A and B on the board.</p>

<p>Animate the algorithm, so we can see it make a path as it goes through various possiblities until it finally reaches the destination cell OR runs out of possible options.</p>

<h4>Execution</h4>

<p>Javascript &ndash; closures!! You can wrap a group of functions together such that the variables in the &ldquo;wrapper&rdquo; can be used by functions contained in the wrapper but not by those outside of it. In other words &hellip; Whenever you see the function keyword within another function, the inner function has access to variables in the outer function. It&rsquo;s all about the scope!!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Board</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">board</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">saveState</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">makeSomeCells</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">81</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">cell</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cell</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">board</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">cell</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">connectCells</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">81</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">findNeighbors</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">makeConnections</span><span class="p">(</span><span class="nx">board</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>Two things went wrong:</p>

<p>1) Animation debacle! Unfortunately tried as we might, we couldn&rsquo;t get it working in time by the end of the Hackathon. The animation was the fresh coat of paint on the whole project.  At least we do know through thorough testing that our algorithm works as it should.</p>

<p>2) Because the unions are randomly generated, there isn&rsquo;t always a path from A to B.</p>

<h4><strong>10:00pm &ndash; &ldquo;Pencils down&rdquo;</strong></h4>

<p>Our team takes a huddle to discuss how we&rsquo;re going to present, points to concentrate on, things we took away, etc.</p>

<h4><strong>10:20pm &ndash; Judging</strong></h4>

<p>There were some amazing apps, only two teams had Phase 1 boots, and one of them won!  It wasn&rsquo;t us, but I was still really proud of everyone in my cohort that participated!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 2: Day 5 - Team Projects]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/07/phase-1-week-2-day-5-team-projects/"/>
    <updated>2014-02-07T21:59:01-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/07/phase-1-week-2-day-5-team-projects</id>
    <content type="html"><![CDATA[<p><strong>7:30am &ndash; Arrive</strong></p>

<p>TEAM PROJECTS!  Holy crap &ndash; nervous and excited (but this seems to be the norm for my DBC experience thus far). NO RULES! NO RULES?!</p>

<p>Well, maybe one &ndash; push ourselves but don&rsquo;t bite off more than we can chew for our first project.</p>

<p>Our main goal &ndash; LEARN</p>

<p><img src="https://github-camo.global.ssl.fastly.net/555fcf42315d33424e6ed0c9f0a9568f6b4fbbfb/687474703a2f2f662e636c2e6c792f6974656d732f32473170305530473133327231463335323034352f53637265656e25323053686f74253230323031332d31302d31382532306174253230332e33382e3237253230504d2e706e67" alt="Agile" /></p>

<h3>The 4 main goals of Agile:</h3>

<ul>
<li>individuals and interactions &mdash; are more worthy of our attention than &mdash; processes and tools</li>
<li>working software &mdash; is more worthy of our attention than &mdash; comprehensive documentation</li>
<li>customer collaboration &mdash; is more worthy of our attention than &mdash; contract negotiation</li>
<li>responding to change &mdash; is more worthy of our attention than &mdash; following a plan</li>
</ul>


<p>you want some clarification on that do you?</p>

<ul>
<li>Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.</li>
<li>Welcome changing requirements, even late in development. Agile processes harness change for the customer&rsquo;s competitive advantage.</li>
<li>Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.</li>
<li>Client-side personnel and developers must work together daily throughout the project.</li>
<li>Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.</li>
<li>The most efficient and effective method ofconveying information to and within a development team is face-to-face conversation.</li>
<li>Working software is the primary measure of progress.</li>
<li>Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.</li>
<li>Continuous attention to technical excellence and good design enhances agility.</li>
<li>Simplicity&mdash;the art of maximizing the amount of work not done&mdash;is essential.</li>
<li>The best architectures, requirements, and designs emerge from self-organizing teams.</li>
<li>At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.</li>
</ul>


<h3>Working Agreements</h3>

<p>Once you&rsquo;ve decided to work with other human beings, things tend to get a little complicated.</p>

<p>The idea is that, once you&rsquo;re part of a team, it&rsquo;s impossible to operate independently without considering other members of your tribe. You have to spend time (basically overhead) to work out how to interact with each other in a meaningful way.</p>

<p>For example, imagine a project has just started on Friday and your team is supposed to work through the weekend. does everyone agree on that plan? What if someone on the team had other plans for the weekend? When will everyone else find out? Not on Saturday morning, I hope.</p>

<ul>
<li>who is part of the team (by naming individuals)?</li>
<li>what roles do they play (although generic roles are ok, specific roles are better)?</li>
<li>how do people stay in touch (cell phones, email, etc)?</li>
<li>when will the team work together vs apart?</li>
<li>what are the working hours?</li>
<li>what absences are expected?</li>
<li>what are your goals as a team?</li>
<li>what are your shared values as a team?</li>
</ul>


<p>Dinner was pizza with some of the cohort and then back to DBC for some coding!</p>

<p><strong>11:30pm &ndash; Depart</strong></p>

<blockquote><p>Science is what we understand well enough to explain to a computer. Art is everything else we do.<br/>
&ndash; Donald Knuth</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 2: Day 4 - Database Intro]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/06/phase-1-week-2-day-4-database-intro/"/>
    <updated>2014-02-06T23:46:23-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/06/phase-1-week-2-day-4-database-intro</id>
    <content type="html"><![CDATA[<p>7:15am &ndash; Arrive</p>

<p>After going through how to design the schema for the different database types [One to One; One to Many; Many to Many] our challenge was to get aquainted with PostgreSQL.</p>

<p>My thoughts &ndash; it&rsquo;s one ugly but powerful duckling. After getting our feet wet we were supposed to use Ruby to create a database and then the faker gem to populate the tables with some fake data, but we wanted to get a little dirtier so we went into Terminal and loaded up psql &ndash; created a database, some tables and columns and populated the fields ourselves. It was good to know what to expect from Postgres when we entered things correctly and incorrectly.  After that we went ahead and did it the way we were supposed to using Ruby.</p>

<p>Tonight I took a small break in the evening to meet some good friends of mine who were visiting from overseas. A nice luxury to unwind for 90 minutes before heading back to DBC to spend some more time trying to hog-tie PostGres</p>

<p>00:30am &ndash; Depart</p>

<blockquote><p>Science is the belief in the ignorance of experts. The first principle is that you must not fool yourself — and you are the easiest person to fool.<br/>
-Richard Feynman</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 2: Day 3 - Building Applications (Flashcards &amp; ToDo)]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/05/phase-1-week-2-day-3-building-applications-flashcards-and-todo/"/>
    <updated>2014-02-05T22:52:00-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/05/phase-1-week-2-day-3-building-applications-flashcards-and-todo</id>
    <content type="html"><![CDATA[<p><strong>7:30am &ndash; Arrive</strong></p>

<p>Todo list!  Today one of the challenges was&hellip; build a todo list!</p>

<p>We want to be able to interact with the user via the terminal&hellip; passing in commands to read and write to an external file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">todo</span><span class="o">.</span><span class="n">rb</span> <span class="n">add</span> <span class="no">Bake</span> <span class="n">a</span> <span class="n">delicious</span> <span class="n">blueberry</span><span class="o">-</span><span class="n">glazed</span> <span class="n">cheesecake</span>
</span><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">todo</span><span class="o">.</span><span class="n">rb</span> <span class="n">list</span>
</span><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">todo</span><span class="o">.</span><span class="n">rb</span> <span class="n">delete</span> <span class="o">&lt;</span><span class="n">task_id</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">todo</span><span class="o">.</span><span class="n">rb</span> <span class="n">complete</span> <span class="o">&lt;</span><span class="n">task_id</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We had to build the program using the MVC (Model-View-Controller) design method.</p>

<p>The general consensus is that in Ruby the lines are semi-fuzzy between the Model and the Controller.  Apparently this fuzziness clears up dramaticaly in Rails, but since we&rsquo;re not yet using Rails, my partner and I had a discussion and mini-whiteboard session to see if we preferred one way over the other.  Ultimately we decided to have our Model hold not only the data but also the methods for manipulating the data, where our Controller essentially acted as the interpreter for what the View was saying.</p>

<p>One of the early problems we encountered was how to have our program add to the external todo list (txt file) without overwriting what was already in it.  The solution was to use &lsquo;a+&rsquo; with File.open</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add_task</span><span class="p">(</span><span class="n">task_to_add</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@your_todo</span> <span class="o">&lt;&lt;</span> <span class="n">task_to_add</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;todo_practice.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="si">#{</span><span class="n">task_to_add</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>   <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>10:40pm &ndash; Depart</strong></p>

<blockquote><p>The question of whether Machines Can Think&hellip; is about as relevant as the question of whether Submarines Can Swim.<br/>
&ndash; Edsger W. Dijkstra</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 2: Day 2 - Object Oriented Programming]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/04/phase-1-week-2-day-2-OOP/"/>
    <updated>2014-02-04T22:30:31-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/04/phase-1-week-2-day-2-OOP</id>
    <content type="html"><![CDATA[<p><strong>8:00am &ndash; Arrive</strong></p>

<h3>Morning session:</h3>

<ul>
<li>Part 1: public vs private interfaces: the interface is the contract</li>
<li>Part 2: argument order dependency: fewer dependencies is always better</li>
<li>Part 3: the self keyword: to thine own self be true</li>
<li>Part 4: classical inheritance: hierarchies are good</li>
<li>Part 5: object composition: but composites are better, or so some say</li>
<li>Part 6: oo terminology: review the words that change your thoughts</li>
</ul>


<p><strong>12:30pm &ndash; Lunch break &amp; Yoga</strong></p>

<p>Afternoon session:
We are introduced to basic application development using the object oriented programming paradigm. Because this is my first time using this approach, it&rsquo;s taking my mind some time to switch from thinking about how to solve the problem procedurally. OO definitely makes more sense for a ton of things so having the exposure now will only help me in the long run.</p>

<h3>an object has both state and behavior</h3>

<p>We dive into building/modeling an interface for a hospital. Users interact with the system via the terminal. Different levels of access for different employees (one example: doctors can add to patient records, but receptionists can not).</p>

<p>Authenticate via user passwords which are stored in the program in a private method whose values are returned to a public method that calls it.</p>

<p><strong>10:30pm &ndash; Depart</strong> &ndash; feels good to head home at a &ldquo;decent&rdquo; time!</p>

<blockquote><p>A change in perspective is worth 80 IQ points.<br/>
&ndash; Alan Kay</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 2: Day 1 - Advanced Ruby]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/03/phase-1-week-2-day-1-advanced-ruby/"/>
    <updated>2014-02-03T22:30:31-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/03/phase-1-week-2-day-1-advanced-ruby</id>
    <content type="html"><![CDATA[<h2>&ldquo;Something old, something new&rdquo;</h2>

<p><strong>8:00am &ndash; Arrive</strong></p>

<p> we had 9 challenges today.  I def had a favorite&hellip;</p>

<h4>&ldquo;revisiting Fibonacci&rdquo;</h4>

<p>Instead of merely checking to see if a number is a Fibonacci number, we take an input, say 27, which then returns the 27th Fibonacci number.  Then we do some benchmarking to see whether having the program run iteratively or recursively was quicker! First intro to benchmarking &ndash; sweeeeet.</p>

<p>Here&rsquo;s our iterative code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fib_iterative</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">fibonacci</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">current_fib_num</span><span class="o">|</span>
</span><span class='line'>    <span class="n">fibonacci</span> <span class="o">&lt;&lt;</span> <span class="n">fibonacci</span><span class="o">[-</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fibonacci</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s our recursive code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fibonacci_recursive</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">prev_fib</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">current_fib</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">prev_fib</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">fibonacci</span> <span class="o">=</span> <span class="n">prev_fib</span> <span class="o">+</span> <span class="n">current_fib</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fibonacci_recursive</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">prev_fib</span> <span class="o">=</span> <span class="n">current_fib</span><span class="p">,</span> <span class="n">current_fib</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, which one is faster? What do <strong><em>you</em></strong> think?  Benchmark it and see if you&rsquo;re right!</p>

<p><strong>11:07pm &ndash; Depart</strong></p>

<blockquote><p>The best way to predict the future is to invent it.<br/>
&ndash; Alan Kay</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Superbowl Sunday-Funday]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/02/superbowl-sunday-funday/"/>
    <updated>2014-02-02T22:36:29-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/02/superbowl-sunday-funday</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve heard many times from many different people that the main thing to do after a vigorous week is to relax for a little bit and let the mind recoup from the vigors of the week. So today was errand day, stocked up on some groceries then headed into DBC.</p>

<p><strong>11:30am &ndash; Arrival</strong></p>

<p>Review, Review, Review and Reading!</p>

<p><strong>3:30pm &ndash; Depart</strong></p>

<p>After that &ndash; it was pizza, beer, and Superbowl time.</p>

<p>Hard to believe week 2 starts tomorrow. One week down, eight to go!</p>

<blockquote><p>Testing can only prove the presence of bugs, not their absence.<br/>
&ndash; Edsger Dijkstra</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 1: Day 5 - Sudoku]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/01/31/phase-1-week-1-day-5-sudoku/"/>
    <updated>2014-01-31T23:30:49-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/01/31/phase-1-week-1-day-5-sudoku</id>
    <content type="html"><![CDATA[<p><strong>8:00am &ndash; Arrive</strong></p>

<p>AM &ndash; check-in with new small groups (3 from our cohort, 3 from the cohort ahead of us). We each get 2 min to talk about anything and not be interrupted. The goal of this exercise is open up, take what’s on your mind and in your heart and talk about it. It may or may not be related to the happenings of DBC.</p>

<p>After pairing up with my coding partner for the day, we dive into how to solve soduku. First step &ndash; let’s solve a puzzle on paper and see how we each (as humans) solve it.</p>

<p>How do you choose where to start?
Did you adopt the same notation/board markings while playing Sudoku? Why? If not, why did you choose differently?
Why do we do a certain action?
Are we avoiding any strategies because they’re too tedious or require us to remember too much?</p>

<p>From there we build the logic of how our sudoku solving algorithm (without guessing) will work. We use a high level approach in our Pseudocode and avoid language specific syntax.</p>

<p>Once we find an empty cell, to form a set of possible values for that cell we check what values are already in that row, then in the column, then in the 3x3 sub-box the cell falls within.</p>

<p>IF the number of possible values is just one, we put that value into the grid
ELSE we move onto the next spot &ndash; so on and so forth</p>

<p>Yes, we’ll have to go over the board several times in order to fill in all the empty cells.</p>

<p><strong>12:30pm &ndash; lunch and yoga</strong> &ndash; harder than Tues or Thurs, but more enjoyable at the same time &ndash; definitely allows me to keep my body and mind centered.</p>

<p>PM &ndash; finishing up the challenge</p>

<p><strong>11:00pm &ndash; Depart</strong></p>

<blockquote><p>Email is a wonderful thing for people whose role in life is to be on top of things. But not for me; my role is to be on the bottom of things. What I do takes long hours of studying and uninterruptible concentration.<br/>
&ndash; Donald Knuth</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 1: Day 4 - Games]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/01/31/phase-1-week-1-day-4-games/"/>
    <updated>2014-01-31T02:00:49-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/01/31/phase-1-week-1-day-4-games</id>
    <content type="html"><![CDATA[<p><img src="https://github-camo.global.ssl.fastly.net/263edda0ba67654c5e68725c981d6701c0f4b8eb/68747470733a2f2f736f6372617465732e646576626f6f7463616d702e636f6d2f6173736574732f747265655f636f6d69632e6a7067" alt="communication" /></p>

<p>How can you not love the above picture &ndash; it&rsquo;s correct on so many levels!</p>

<p><strong>8:00am &ndash; Arrive</strong></p>

<p>Diving into games! Scary and fun at the same time.</p>

<p>First up: Pig Latin</p>

<p>take an input string</p>

<p>IF the string starts with a vowel, return the word (unchanged)
ELSE set the consonants at the of the word and add the suffix &ldquo;ay&rdquo;
PRINT the pig-latin-ified word
The best way in my mind would be to use RegEx, and that&rsquo;s exactly what happened.</p>

<p>For the first example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">normal_word</span> <span class="o">=~</span> <span class="sr">/\A[aeiyou]/</span>
</span><span class='line'><span class="nb">p</span> <span class="n">normal_word</span>
</span></code></pre></td></tr></table></div></figure>


<p>=~ \A  means the search MUST start at the beginning of the string.</p>

<p>[aeiyou] the square brackets mean that a positive match will occur if the first letter (in this case) is one of the characters in the brackets &ndash; like “a” or “e” or “i” or “y” or “o” or “u” is the first letter, then <em>BING</em> we have a match</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">p</span> <span class="n">normal_word</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/(^[^aeiyou]*)(.+)/</span><span class="p">,</span> <span class="err">”</span><span class="p">\</span><span class="mi">2</span><span class="o">-</span><span class="p">\</span><span class="mi">1</span><span class="n">ay</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You’ll notice 2 pairs of paranthesis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/(^[^aeiyou]*)(.+)/</span>
</span></code></pre></td></tr></table></div></figure>


<p>the first hat ^ acts the same as \A</p>

<p>inside the [ ] the ^ acts as “NOT”</p>

<p>* after the right bracket ] means to end that search there</p>

<p>the second pair of brackets assigns the result of that search to a second group.</p>

<p>the period means to match any character, the + means “one or more”</p>

<p>#gsub!(this is what we are searching for, replace it with this)</p>

<p>will destructively match and replace the match. There’s a special syntax when you use those captured groups</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">“</span><span class="p">\</span><span class="mi">2</span><span class="o">-</span><span class="p">\</span><span class="mi">1</span><span class="n">ay</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the group is inside double quotes, we have to have \ preceding the group number. \2 refers to group two, \1 refers to group one.</p>

<p>So here, we’d have group two followed by a dash, then group one, followed by “ay” with no white-spaces separating them.</p>

<p>DBC Yoga &ndash; especially good</p>

<p>AHA Moments!</p>

<p>Linked Lists:</p>

<p>the pointer points to the entire object, not just the value
object within an object within an object &ndash; on and on until the end of the list</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/CPT-LinkedLists-deletingnode.svg/380px-CPT-LinkedLists-deletingnode.svg.png" alt="Linked Lists" /></p>

<h4>Assignment Operators</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">||=</span>
</span></code></pre></td></tr></table></div></figure>


<p>tests left argument for truthiness, if nil or false will overwrite it with right argument.  In the example below, if a is nil or false, it is assigned the value 3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">||=</span><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">||</span> <span class="n">a</span><span class="o">=</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>11:35pm &ndash; Depart</strong></p>

<blockquote><p>Smart data structures and dumb code works a lot better than the other way around.<br/>
&ndash; Eric S. Raymond</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 1: Day 3 - Basic Data Structures]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/01/29/phase-1-week-1-day-3-basic-data-structures/"/>
    <updated>2014-01-29T23:35:49-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/01/29/phase-1-week-1-day-3-basic-data-structures</id>
    <content type="html"><![CDATA[<p><strong>8:15am &ndash; Arrive</strong></p>

<p>Solo (optional) day</p>

<p>Didn’t go solo, had the pleasure of pairing with Quentin &ndash; my brother from another mother.</p>

<p>AM coding &ndash; Basic Data Structures</p>

<p>Hawaiian BBQ for lunch &ndash; highly recommend it for fellow protein loving boots.</p>

<p>Shadi gives us a nice tutorial on Test Driven Development (TDD). Quentin and I decided to approach the afternoon’s challenges utilizing this new and powerful tool by utilitizing asserts to test as opposed to “puts” statements.</p>

<p>We wrote a bunch of tests and then started putting it together, locating the error in the stack, debugging that particular error, saving and retesting.</p>

<p>PM coding &ndash; Abstract Data Structures (ADT)</p>

<p>Some coaches had a very nice indepth teaching session on Git. I entered feeling like I had a basic idea of what was going on, I walked out feeling very confident I have a solid high-level understanding of how to correctly use Git moving forward.</p>

<p><strong>12:30am &ndash; Depart</strong></p>

<blockquote><p>Simplicity is prerequisite for reliability.<br/>
&ndash; Edsger Dijkstra</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 1: Day 2 - Data, Decisions, Loops & Flows]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/01/28/phase-1-week-1-day-2-data-loops-flows/"/>
    <updated>2014-01-28T23:30:29-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/01/28/phase-1-week-1-day-2-data-loops-flows</id>
    <content type="html"><![CDATA[<p><strong>8:06am &ndash; Arrive</strong></p>

<p>coding challenges &ndash; roman numerals &ndash; encoding and decoding them. After doing the first two parts, it was great fun to look at the case studies (collection of 29 examples of student code) and see where they differ and are similar. You start to be able to recognize how efficient/clean/easy to read different methods and approaches are. Then we use what we learned there to re-write our roman-numeral encoding method from scratch.</p>

<p>Engineering Empathy training session with Karim Bishay &ndash; eye opening for sure. This kind of training will apply well to all areas of my life. We did an exercise where we confront out superego. Some people were crying afterward, who can blame them though. Luckily DBC is a very safe space to expose vulnerabilities and insecurities  Very intense. It&rsquo;s no wonder they planned that right before our first yoga session.  The yoga for those that are wondering is very meditative and relaxing, you won&rsquo;t be sweating afterwards, more getting in tune with your body and re-centering your mind. I promised my girlfriend I&rsquo;d be going at least 3 times a week for the duration of the course. It is mandatory Tues &amp; Thur for Phase 1.</p>

<p>PM coding challenges &ndash; learning about different kinds of sorting and their Big O notation.</p>

<p><img src="https://github-camo.global.ssl.fastly.net/e409d816ec89b91ff74fbfd728b2f4f8f4d9867d/687474703a2f2f636c2e6c792f696d6167652f316f333834343354313930312f53637265656e25323053686f74253230323031342d30312d32382532306174253230322e34342e3032253230504d2e706e67" alt="Big O Complexity" /></p>

<h4>Bubblesort</h4>

<p>is not very impressive and takes a LOOOONG time</p>

<h4>Quicksort</h4>

<p>you select a random piece of data, that&rsquo;s your pivot point. You remove that from the array you want to sort, now you separate the remaining data into 2 groups (let&rsquo;s call them): Left, Right. A piece of data goes into left if it&rsquo;s value is less than the pivot point. If it&rsquo;s greater than the pivot point, it goes into Right. You then run quicksort again on the two new sets of data Left, and Right.  Wait &ndash; is that recursion? NICE!</p>

<p><strong>11:00pm &ndash; Depart</strong></p>

<blockquote><p>Simplicity is prerequisite for reliability.<br/>
&ndash; Edsger Dijkstra</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 1: Week 1: Day 1 - Encoding, Decoding]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/01/27/phase-1-week-1-day-1-encoding-decoding/"/>
    <updated>2014-01-27T23:00:29-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/01/27/phase-1-week-1-day-1-encoding-decoding</id>
    <content type="html"><![CDATA[<p><strong>8:30am &ndash; Arrive</strong></p>

<p>It&rsquo;s been over 12 weeks of official prep work &ndash; and something that I got accepted for in May of 2013.  Hard to believe it&rsquo;s finally here. Not having a programming background I am definitely nervous.</p>

<p>doors open promptly at 9am on the first day&hellip; what&rsquo;s it like? Well you&rsquo;ll just have to be there to experience it. Suffice to say, any new boots will love it!</p>

<h3>First day lessons:</h3>

<ul>
<li>Be open with your ignorance</li>
<li>Don&rsquo;t be afraid to ask questions</li>
<li>Teach if you understand something</li>
<li>Be kind</li>
<li>Critically ride the wave of curiosity</li>
<li>Sleep</li>
<li>Step away from the bubble</li>
</ul>


<p>The first half of the morning was getting to know our fellow cohorts and the DBC family, the resources available to us, and what to expect.</p>

<p>Lunch followed and then afterward we were coding in the afternoon. We paired 3 times in 3 hours. Taking what we learned/applied/how we approached to each subsequent pairing session. It was much more useful than I initially thought it would be. I gained a lot of insight from pairing several times on the SAME challenge.</p>

<p>A final note &ndash; I made the right decision to come and attend. No doubt about it :)</p>

<p><strong>10:45pm &ndash; Depart</strong></p>

<blockquote><p>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.<br/>
&ndash; Brian Kernighan</p></blockquote>
]]></content>
  </entry>
  
</feed>
