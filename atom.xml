<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Captain's Log]]></title>
  <link href="http://trekkie4life.github.io/atom.xml" rel="self"/>
  <link href="http://trekkie4life.github.io/"/>
  <updated>2014-03-19T23:24:03-07:00</updated>
  <id>http://trekkie4life.github.io/</id>
  <author>
    <name><![CDATA[Armando Reed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phase 3: Week 2: Day 3 - Client-side Heavy Apps]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/19/phase-3-week-2-day-3-client-side-heavy-apps/"/>
    <updated>2014-03-19T08:47:53-07:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/19/phase-3-week-2-day-3-client-side-heavy-apps</id>
    <content type="html"><![CDATA[<p><strong>8:25am &ndash; Arrive</strong></p>

<p>Today&rsquo;s mission: build a one-page app using (at least) jQuery, Javascript, and AJAX to render questions to the user, allow them to submit answers, tell them whether or not their submitted answer was correct, and give them their final correct/incorrect tally.</p>

<p>We were only allowed to modify the front end &ndash; we couldn&rsquo;t touch ANYTHING on the backend.</p>

<p>Challenging &ndash; hell yeah, it&rsquo;s the first time since we used API&rsquo;s at the end of phase 2 that we didn&rsquo;t have control over the backend as well.</p>

<p>Having that restriction put on us was difficult, but a better model of what awaits us in the real world as junior developers.  A junior dev won&rsquo;t exactly be handed the keys to the database and backend.</p>

<p>Tomorrow we pitch project ideas, I&rsquo;m not sure what I will pitch but I should pitch something for the mere practice of it.</p>

<p><strong>11:00pm &ndash; Depart</strong></p>

<blockquote><p>The greatest obstacle to discovery is not ignorance, but the illusion of knowledge.<br/>
&ndash; D. Boorstin</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 3: Week 2: Day 2 - miniQuery]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/19/phase-3-week-2-day-2-miniquery/"/>
    <updated>2014-03-19T08:47:30-07:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/19/phase-3-week-2-day-2-miniquery</id>
    <content type="html"><![CDATA[<p><strong>8:30am &ndash; Arrive</strong></p>

<p>So what&rsquo;s the deal about miniQuery? It&rsquo;s using vanilla JavaScript to build certain functions of jQuery &ndash; the purpose? So we become enlightened and unafraid of jQuery under the hood and come to the realization that we can understand it and create it&hellip; to empower us and give us faith in our ability.</p>

<p>In addition to that, one cool thing we learned about today in JavaScript &ndash; hidden methods &ndash; the common indicator is to add an underscore in front of a method name.</p>

<p>In the code below if we call</p>

<p><code>SweetSelector.sweetness</code> the only thing that gets returned is <code>_sweetSelector()</code> but we can&rsquo;t actually see what <code>_sweetSelector()</code> is doing. Pretty cooool!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">SweetSelector</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">){</span>
</span><span class='line'><span class="c1">//getelementsbyclassname</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_sweetSelector</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">string</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">splitString</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">splitString</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;.&#39;</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">splitString</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">className</span> <span class="o">=</span> <span class="nx">splitString</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="c1">//getelementbyid</span>
</span><span class='line'>  <span class="c1">//getelementsbytag</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span><span class="p">{</span>
</span><span class='line'>    <span class="nx">sweetness</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">_sweetSelector</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}())</span>
</span></code></pre></td></tr></table></div></figure>


<p>We had trouble when modifying an HTML display property, our miniQuery could set the display property to none, but when we showed it, the default/initial display property vanished into thin air. This really bothered us, but since we were on a time crunch we moved on &mdash; ONLY AFTER we took a dive in the jQuery source code to see how they did it.</p>

<p>The way they took care of that was to have a single method showHide with logic inside that hid a class/id/target but holds the display property in a variable and then sets <code>display: none</code> if it&rsquo;s <code>show</code> then it checks to see if there was an initial display value, if so it sets <code>display</code> to that, if not, then it gets the default display property of other elements of that type on the page.</p>

<p>My take away? Well played, Steven and Shadi, it&rsquo;s not magic and we can create it and understand it.</p>

<p><strong>12:15am &ndash; Depart</strong></p>

<blockquote><p>If you&rsquo;re not failing every now and again, it&rsquo;s a sign you&rsquo;re not doing anything very innovative.<br/>
&ndash; W. Allen</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 3: Week 2: Day 1 - Karmaville]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/19/phase-3-week-2-day-1-karmaville/"/>
    <updated>2014-03-19T08:47:15-07:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/19/phase-3-week-2-day-1-karmaville</id>
    <content type="html"><![CDATA[<p><strong>8:30am &ndash; Arrive</strong></p>

<p>The goal today was different but no less fun than normal &ndash; we were given a highly UNoptimized webapp and told to make it faster.</p>

<p>How?</p>

<p>Look for bottlenecks.  Look for the lowest hanging fruit, and then start fine tuning!</p>

<p>How do we get from a page taking 11sec to load down to under 200ms?</p>

<p>It was a really good foray into looking at code and what causes certain things to really slow down (I&rsquo;m speaking to you, database queries), and also what small fixes you can implement to take care of that.</p>

<p>One of the best things you can do to speed up database queries in Rails/Active Record is to add a foreign-key Index!  In fact, it should be and often is considered a Rails best practice.</p>

<p>Why do you have to do it? Because Rails does NOT do it automatically for a foreign key.</p>

<figure class='code'><figcaption><span>your_migration_file.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateKarmaPoints</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:karma_points</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:value</span><span class="p">,</span>   <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span>  <span class="ss">:label</span><span class="p">,</span>   <span class="ss">:null</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:karma_points</span><span class="p">,</span> <span class="ss">:user_id</span>  <span class="c1"># this adds the foreign index!!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a completely non-sequitur note &ndash; I have never let my facial hair grow for this amount of time without shaving. I&rsquo;d like to think of it as a &ldquo;real&rdquo; beard, something that makes men tremble in fear and stare in awe.  Instead, it more closely resembles a dying lawn with a few patches of grass clinging to life. I&rsquo;ve also taken to stroking my (sad) beard when deep in thought. I never used to do that motion unless in jest, but apparently having facial hair and arms means you will form that habit. It&rsquo;s instinctual. You cant fight it.</p>

<p><strong>12:00am &ndash; Depart</strong></p>

<blockquote><p>On two occasions, I have been asked [by members of Parliament], &ldquo;Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?&rdquo; I am not able to rightly apprehend the kind of confusion of ideas that could provoke such a question.<br/>
&ndash; C. Babage</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 3: Week 1: Day 5 - Overflow cont'd]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/14/phase-3-week-1-day-5-overflow-contd/"/>
    <updated>2014-03-14T14:44:10-07:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/14/phase-3-week-1-day-5-overflow-contd</id>
    <content type="html"><![CDATA[<p><strong>8:30am &ndash; Arrive</strong></p>

<p>Friday morning check-ins, one of my favorite parts of DBC. Steven, the instructor in our check-in circle made the observation of it being very cyclical &ndash; like seasons changing &ndash; it made a lot of people feel more at ease, especially the phase 1&#8217;ers.</p>

<p>We spent today adding integration tests via Capybara, and then cleaning up the code and combining our vertical slices together. There were a few hiccups, but nothing we couldn&rsquo;t handle. A lot of functionality is there and now we have Saturday and Sunday to put a little polish on it and add a couple more features (like search!).</p>

<p><strong>10:40pm &ndash; Depart</strong></p>

<blockquote><p>All truths are easy to understand once they are discovered; the point is to discover them.<br/>
&ndash; G. Galilie</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 3: Week 1: Day 4 - Overflow]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/13/phase-3-week-1-day-4-overflow/"/>
    <updated>2014-03-13T14:03:25-07:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/13/phase-3-week-1-day-4-overflow</id>
    <content type="html"><![CDATA[<p><strong>8:30am &ndash; Arrive</strong></p>

<p>Seattle Style &ndash; the hidden menace, no parentheses.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">add</span> <span class="n">operandA</span><span class="p">,</span> <span class="n">operandB</span>
</span><span class='line'>  <span class="n">operandA</span> <span class="o">+</span> <span class="n">operandB</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is it only style or is it function? Well, it makes the edge cases (where you actually have to use parentheses) harder to find and fix in your code. But to each their own.</p>

<hr />

<p>Testing RSpec, Rails doesn&rsquo;t actually render the body, so the body is just an empty string. To check if something is actually in the body that you&rsquo;re testing for, use <code>render_views</code> right below the first <code>describe</code> statement in your controller tests.</p>

<p>Remember, in Capybara, an actual browser window is opened, so you don&rsquo;t run into this problem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;this is the first describe&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">render_views</span>
</span><span class='line'>  <span class="c1"># more fun testing code here!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>#change</p>

<p>once upon a time change did not exist, there was only up &amp; down</p>

<p>Rails got smarter, would figure out what the inverse operation was.</p>

<p>Migrations change structure. If you need to change structure (raw data) AND edit the code, you&hellip;</p>

<p>1) migration (structural change)</p>

<p>2) SQL operations &ndash; populate new column you added</p>

<p>DO NOT UNDER ANY CIRCUM &ndash; USE YOUR ACTIVE RECORD MODEL TO CHANGE YOUR DB</p>

<p>want data repopulation to not be bound to Rails, but solely to the database itself &ndash; it&rsquo;s also much faster bc Active Record has a lot of overhead on migrations.</p>

<p>What does that look like in code?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">add_column</span> <span class="ss">:tasks</span><span class="p">,</span> <span class="ss">:todo_id</span><span class="p">,</span> <span class="ss">:integer</span> <span class="c1">#the structural change</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#ActiveRecord::Base connection.execute_sql &quot;long string of SQL&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Group project &ndash; first one using Rails!!</p>

<p>Quentin, Chermaine, Matthew, Hunter, and myself. I&rsquo;ve never been in a group with either Matthew or Hunter, but they are both sharp and bring a lot, so I&rsquo;m looking forward to the experience and learning from them too.</p>

<p>We have to make a <a href="http:/www.stackoverflow.com/questions">Stack Overflow</a> clone. Although make it about something other programming. &ndash; We are deciding to make a &ldquo;DBC Overflow&rdquo; &ndash; where Phase 0 and potential applicants can ask questions about the experience and how to prepare.</p>

<p>After getting our Rails skeleton set up (no scaffolding allowed here, folks), we had our division of labor set up. Vertical slices and features split up among the team.</p>

<p>Hunter and I were to work on Questions/Answers from the database all the way up to their views.</p>

<p>Everyone committed early AND often.</p>

<p>Hunter and I methodically worked through several errors and bugs &ndash; getting everything set up with passing tests by the time we left.  Gotta tell you, that is one hell of a feeling of accomplishment. Tomorrow we tie everything together and iron out the kinks.</p>

<p>Also, no merge conflicts! Woo hoo!</p>

<p><strong>1:20am &ndash; Depart</strong></p>

<blockquote><p>Simplicity is the soul of efficiency.<br/>
&ndash; A. Freeman</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 3: Week 1: Day 3 - TDD w Rails]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/12/phase-3-week-1-day-3-tdd-w-rails/"/>
    <updated>2014-03-12T23:01:54-07:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/12/phase-3-week-1-day-3-tdd-w-rails</id>
    <content type="html"><![CDATA[<p><strong>8:00am &ndash; Arrive</strong></p>

<p>Today, paired with Matthew again ::high-five:: to TDD with feature testing! We were given a 40% complete version of a &ldquo;to do&rdquo; app. With this app, you can add several Todo lists (say, &ldquo;Home&rdquo;, &ldquo;Work&rdquo;, etc). You can edit the list name, and each list has its own tasks.</p>

<p>Our job was to add functionality to the tasks (tasks can be added, marked as completed, or unmarked, edited, and be deleted) &ndash; and to do it with a TDD frame of mind.</p>

<p>We tested via Capybara &ndash; because we are really getting an emphasis on it now, and the reason was revealed to us&hellip; it&rsquo;s because testing via Capybara is time intensive to run, an we will gain a new found love of controller tests and also unit/model tests, which are pretty inexpensive to run from a time stand point.</p>

<p>Capybara syntax is kind of funky but it reads pretty close to english. Hey, click on this, fill in that, expect this result or thing to be on the page.</p>

<figure class='code'><figcaption><span>spec/features/tasks_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;User can create a task&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;with valid body&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;task link will be appended to the page&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">visit</span> <span class="n">todo_path</span><span class="p">(</span><span class="n">todo</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fill_in</span> <span class="s2">&quot;Body&quot;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;clean house&quot;</span>
</span><span class='line'>        <span class="n">click_on</span> <span class="s2">&quot;Create Task&quot;</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span> <span class="s2">&quot;clean house&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Afterward we threw down some mild styling just to add a dash of spice to the web app.</p>

<p>And in the evening we concentrated on RSpec.</p>

<p>I&rsquo;m feeling a lot more confident on my testing &lsquo;skillz&rsquo;.</p>

<p><strong>12:15am &ndash; Depart</strong></p>

<blockquote><p>More than the act of testing, the act of designing tests is one of the best bug preventers known. The thinking that must be done to create a useful test can discover and eliminate bugs before they are coded &ndash; indeed, test-design thinking can discover and eliminate bugs at every stage in the creation of software, from conception to specification, to design, coding and the rest.<br/>
&ndash; B. Bezier</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 3: Week 1: Day 2 - Getting our hands wet w/Rails]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/11/phase-3-week-1-day-2-getting-our-hands-wet-w-slash-rails/"/>
    <updated>2014-03-11T22:44:50-07:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/11/phase-3-week-1-day-2-getting-our-hands-wet-w-slash-rails</id>
    <content type="html"><![CDATA[<p><strong>8:00am &ndash; Arrive</strong></p>

<p>Paired with Matthew today, another great pairing session. I got a bit more confident with my testing skills, played with the test suite Capybara and got a bit more comfortable with RSpec and Shoulda matchers.</p>

<p>A little taste of each, but no main turkey meal out of any of them. I&rsquo;m sure we&rsquo;ll get to it though!</p>

<p>Remake the Craigslist Jr app we did in phase 2, and do it before lunch &ndash; thanks to our knowledge and the power of Rails.</p>

<p>Did we succeed?  You know it! Even added some transitions on hover, whaaaaaa. hahaha, ok, so that&rsquo;s not difficult, but we were overly proud of it. It&rsquo;s the little victories that count.</p>

<p>After lunch &ndash; get ready to write some tests.</p>

<p>First up &ndash; use FactoryGirl to help with test data. Yes, we are using our CoolFaker gem!</p>

<figure class='code'><figcaption><span>spec/factories.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:category</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">name</span> <span class="p">{</span> <span class="ss">CoolFaker</span><span class="p">:</span><span class="ss">:Team</span><span class="o">.</span><span class="n">name</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">title</span> <span class="p">{</span> <span class="ss">CoolFaker</span><span class="p">:</span><span class="ss">:Team</span><span class="o">.</span><span class="n">name</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">email</span> <span class="p">{</span> <span class="ss">Faker</span><span class="p">:</span><span class="ss">:Internet</span><span class="o">.</span><span class="n">email</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">key</span> <span class="p">{</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">urlsafe_base64</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">price</span> <span class="p">{</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">50</span><span class="o">.</span><span class="n">.</span><span class="mi">1000000</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">description</span> <span class="p">{</span> <span class="ss">CoolFaker</span><span class="p">:</span><span class="ss">:Team</span><span class="o">.</span><span class="n">slogan</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">category</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up, utilize FactoryGirl in helping us do our controller tests.</p>

<figure class='code'><figcaption><span>spec/controllers/categories_controller_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">CategoriesController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:category</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:category</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let!</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;#index&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;is successful&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_ok</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;assigns all categories to @categories&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:categories</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="no">Category</span><span class="o">.</span><span class="n">all</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then our unit/model tests using Shoulda matchers.</p>

<figure class='code'><figcaption><span>spec/models/post_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;validations&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:title</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:email</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:price</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span> <span class="ss">:description</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;associations&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">belong_to</span> <span class="ss">:category</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, short and sweet. Testing is a small investment in time with a huge return &ndash; and it&rsquo;s definitely growing on me. I&rsquo;m sure Steven and Shadi (our Phase 3 instructors) would shed a tear of joy if they read that.</p>

<p><strong>11:40pm &ndash; Depart</strong></p>

<blockquote><p>To teach is to learn twice.<br/>
&ndash; J. Joubert</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 3: Week 1: Day 1 - Intro to Rails]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/10/phase-3-week-1-day-1-intro-to-rails/"/>
    <updated>2014-03-10T23:44:41-07:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/10/phase-3-week-1-day-1-intro-to-rails</id>
    <content type="html"><![CDATA[<p><strong>8:00am &ndash; Arrive</strong></p>

<p>I did some reviewing over the weekend, but got out of the bubble by going to visit some friends in the city. It was so nice to get a breath of fresh air and share some of my experience with people close to me and rooting me on.</p>

<hr />

<p>A day of welcoming the new cohort and all that involves. I love it &ndash; this communal feeling of opening up our space to doughy eyed future coworkers and friends and paying it forward in welcoming them to their new home for the duration of DBC. And as I mentioned before, the</p>

<p>The video Ivan an Mathilde made was great &ndash; cheesy and geeky and wrapped up in some Banana Slug (our cohort) and DBC inside jokes. Everyone was dying of laughter. I&rsquo;m proud of them for pulling that off so well.  It&rsquo;s official, we&rsquo;re in Phase 3 now. ::jaw drops::</p>

<p>We got a breakdown of what our final three weeks will look like. At one point, Shadi (one of our instructors, who happened to also be one of our great Phase 1 instructors) said, &ldquo;ONLY 8 business days until you pitch final projects.&rdquo; And then it hit me. these next three weeks will fly by, just as the other six did.</p>

<p>After lunch we got our first intro lecture to Rails, after that, it was time to get our hands dirty and see what was going on.</p>

<p>Our number one rule in Phase 3 in regards to Ruby on Rails&hellip;</p>

<p>Do NOT use rails scaffold &amp; rails generation. The only exception is Rails generate migration. We are learning to write code, don&rsquo;t let Rails write it for you.</p>

<p>Makes perfect sense.</p>

<p>Right off the bat, you can&rsquo;t help but realize they had a very clear method in getting us to use Sinatra with a stripped down Rails skeleton/file structure in it, to get us used to it. It&rsquo;d be difficult to jump from Ruby straight into Rails without that intermediate step of Sinatra in Phase 2.</p>

<p>Setting up routes is Rails is easy &ndash; once you have your migrations and models set up, you want to work on your views, before that, hit up <code>config/routes.rb</code></p>

<p>Priority is based on order of creation, so if one depends on another, just put it first, as seen below</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;welcome#index&#39;</span>  <span class="c1">#remember to delete public/index.html</span>
</span><span class='line'>
</span><span class='line'><span class="n">resources</span> <span class="ss">:products</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>resources :products</code> That simple line of code will maps HTTP verbs to controller actions automatically! Sweeeeeeet!</p>

<p>Use <code>rake routes</code> in the Terminal to see a list of your HTTP verbs and which controller actions they map to.</p>

<p>If you had to the products controller, you&rsquo;ll see your actions/methods&hellip;</p>

<figure class='code'><figcaption><span>app/controllers/products_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'> <span class="vi">@products</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="cp">__END__</span>
</span><span class='line'>
</span><span class='line'><span class="cp">and also create, edit, update, destroy</span>
</span></code></pre></td></tr></table></div></figure>


<p>then there&rsquo;s a view folder you make for the corresponding controller <code>app/views/products/</code> and the files contained within correspond to index, edit, show, new, etc. The files are formatted <code>*.html.erb</code></p>

<p>and <code>app/assests</code> contains the folders that have your image, JavaScript, and CSS files. How convenient.</p>

<p>It&rsquo;s only the beginning, and there&rsquo;s an ocean of information left to learn, but it&rsquo;s pretty cool stuff!</p>

<p><strong>11:15pm &ndash; Depart</strong></p>

<blockquote><p>Tell me and I forget. Show me and I remember. Involve me and I understand.<br/>
&ndash; Chinese Proverb</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 3: Day 5 - End of Phase]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/07/phase-2-week-3-day-5-end-of-phase/"/>
    <updated>2014-03-07T09:58:11-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/07/phase-2-week-3-day-5-end-of-phase</id>
    <content type="html"><![CDATA[<p><strong>8:00am &ndash; Arrive</strong></p>

<p>A quick review of JavaScript prototypal inheritance. In most languages (like Ruby), classes inherit from other classes. In JS, the inheritance is &ldquo;prototype&rdquo; based, that means there are NO CLASSES. Instead an object inherits from another object.</p>

<p>Inheritance, the <strong>proto</strong> &ndash; When an object rabbit inherits from another object animal, in JavaScript that means that there is a special property rabbit.<strong>proto</strong> = animal.</p>

<p><img src="http://javascript.info/files/tutorial/intro/object/prototype.png" alt="" /></p>

<p>When a rabbit property is accessed, and the interpreter can’t find it in rabbit, it follows the <strong>proto</strong> link and searches in animal.</p>

<p><img src="http://javascript.info/files/tutorial/intro/object/proto4.png" alt="" /></p>

<p>One could put a method into animal and it becomes available in rabbit.</p>

<hr />

<p>The phase 3&#8217;ers had their final project presentations today &ndash; They were great, and I&rsquo;m a bit overwhelmed. I can see it happening, but I can&rsquo;t imagine it happening in 3 weeks. It&rsquo;s kind of mind boggling&hellip; even after being in this program for 6 weeks already.</p>

<p><strong>8:00pm &ndash; Depart</strong></p>

<blockquote><p>I am always doing that which I cannot do, in order that I may learn how to do it.<br/>
&ndash; P. Picasso</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 3: Day 4 - Testing]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/06/phase-2-week-3-day-4-testing/"/>
    <updated>2014-03-06T15:40:22-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/06/phase-2-week-3-day-4-testing</id>
    <content type="html"><![CDATA[<p><strong>8:00am &ndash; Arrive</strong></p>

<p>Officially make it into Phase 3, which is nice. Part of me feels not ready. Part of me is&hellip; I feel like I need more time to gain a very very solid understanding on some things, but as I learn more I realize that I know less. It&rsquo;s humbling and makes you want to strive for more&hellip; but at the same time, when is enough actually enough? When will you ever feel comfortable?</p>

<p>&ldquo;If you don&rsquo;t have tests, you&rsquo;re just moving shit around&rdquo; -Strand</p>

<p>Today, we aimed for maximum test coverage. Test Coverage shows which parts of your code are tested and which are not. It does not say anything about the quality of those tests, so make sure you are also writing meaningful tests.</p>

<p><a href="http://www.developertesting.com/archives/month200705/20070504-000425.html">&ldquo;What is Testivus&#8217; wisdom concerning the proper percentage of test coverage?&rdquo;</a>.</p>

<p><strong>11:00pm &ndash; Depart</strong></p>

<blockquote><p>The limits of your language are the limits of your world.<br/>
&ndash; L. Wittgenstein</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 3: Day 3 - O-Auth]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/05/phase-2-week-3-day-3/"/>
    <updated>2014-03-05T00:10:35-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/05/phase-2-week-3-day-3</id>
    <content type="html"><![CDATA[<p><strong>8:30am &ndash; Arrive</strong></p>

<p>A lecture on the intricacies of O-Auth flow. Yeah, it&rsquo;s complicated, but as long as I have a high-level understanding I can build on it.</p>

<p>As Quentin (my pairing partner for the day ::high-five:: is always fun to work with) get started, we get everything set up, but then whenever we try loading the sinatra server, we keep getting a 401 error.  401?! Ok, let&rsquo;s take a look. Everything seems well on our side, and on Twitter&rsquo;s side online when we log into our developer account. Hmmm, what is it? Maybe it&rsquo;s how our key and secret are stored in the yaml file? Edit format, save, start server &ndash; load page&hellip;<del>success</del> error, still 401. Some more round about debugging before &ndash; take a guess &ndash; and it&rsquo;s at about this point that Sherif&rsquo;s voice is starting to enter&hellip;. &ldquo;look at the simple thing first.&rdquo;</p>

<p>A couple other boots in our cohort took a look and it was beyond simple &ndash; fundamental infact &ndash; the callback URL we had for the app on Twitter was empty. ::massive facepalm::
<img src="http://4.bp.blogspot.com/-m2slla6Qc4o/Uk2nq4In5GI/AAAAAAAAE0w/BVWz6YNrgj4/s1600/picard-facepalm-o.gif" alt="" /></p>

<p>At this point we were ready to roll.</p>

<p>12:30pm &ndash; Lunch &amp; Yoga</p>

<p>The &ldquo;access token&rdquo; and &ldquo;access token secret&rdquo; will have to change depending on what user is currently authenticated. This key pair answers the question, &ldquo;On whose behalf is this application acting?&rdquo;</p>

<p>Twitter needs to answer both of these questions to make sure that the application is valid and that the application can <em>only</em> do what it has permission to do on behalf of an authenticated user.</p>

<p>The core OAuth flow goes like this:</p>

<ol>
<li>Application generates URL to &ldquo;Sign In with Twitter&rdquo;.</li>
<li>Application renders page with &ldquo;Sign In with Twitter&rdquo; link</li>
<li>User clicks &ldquo;Sign In with Twitter&rdquo;</li>
<li>User is redirected to Twitter and authorizes the application</li>
<li>User is redirected back to the application&rsquo;s callback URL</li>
<li>Application verifies the redirection from Twitter is valid</li>
<li>If valid, Application takes appropriate action</li>
</ol>


<p>We first tweeted from the command line, in true geek fashion.</p>

<p>Next was adding a small user interface so any Twitter could log in and tweet from their own account.</p>

<p>Success!!</p>

<p><strong>11:00pm &ndash; Depart</strong></p>

<blockquote><p>Learning how to learn is life&rsquo;s most important skill.<br/>
&ndash; T. Buzan</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 3: Day 2 - Portfolio Challenge Day]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/04/phase-2-week-3-day-2-portfolio-challenge-day/"/>
    <updated>2014-03-04T14:25:49-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/04/phase-2-week-3-day-2-portfolio-challenge-day</id>
    <content type="html"><![CDATA[<p><strong>8:30am &ndash; Arrive</strong></p>

<p>catching up on sleep after a late night</p>

<p>Today is a catchup day on the portfolio challenges. I have 2 more to do and I&rsquo;m done.</p>

<p>It&rsquo;s nice to have a day to be able to concentrate and take a deep breath to</p>

<p>Portfolio Challenge 9 &ndash;</p>

<hr />

<p>models do not have to be ActiveRecord backed. Think about the Die problem!</p>

<hr />

<p>some quick truth bombs from a review lecture on the boundary between JS &amp; jQuery:</p>

<ul>
<li>Models &ndash; better not have jQuery</li>
<li>Controller &ndash; just has an &ldquo;ajax helper&rdquo; (maybe it returns JSON objects)</li>
<li>View &ndash; jQuery, baby!</li>
</ul>


<p>Models instantiated by a Controller &ndash; i.e. collection of trees (possibly an array of tree objects) lives in the Controller
render those in the View by using jQuery to manipulate the DOM</p>

<p>Ajax makes it difficult because of things like Binding (where do those go?). Do not have binding jumble up the HTML, that responsiblity should be held in the View.</p>

<hr />

<p>Portfolio Challenge 10 &ndash; APIs</p>

<p>1st go to <a href="http://instagram.com/developer/">instagram and signup</a> and register to get your client_ID and client_Secret.</p>

<p>Instagram is very VERY picky about the website you sign up with as all requests redirect there, so be sure to use your local machine if you are making and testing an app locally.</p>

<p>After you successfully sign up there, go <a href="https://github.com/Instagram/instagram-ruby-gem">Download the ruby gem &lsquo;instagram&rsquo;</a></p>

<p>Their documentation is excellent.</p>

<p><code>gem 'instagram'</code> to your Gemfile.</p>

<p>Add <code>require 'instagram'</code> to your environment.</p>

<p>Their example is hardcoded, but you can definitely make it cleaner and MVC it if you want (and you should want to do that).</p>

<p>You can use the API to search for photos/videos by the following:</p>

<ul>
<li>geo location</li>
<li>hashtag</li>
<li>user-name</li>
<li>etc&hellip;</li>
</ul>


<p>You can also have a user authorize the app to like/comment/unlike on things, but for this particular challenge, I found out how to gather the tags.  In my code the following line in the controller works the magic&hellip;
what that returns is actually an array of Objects from instagram.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="s1">&#39;/tags/:tag&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@tag</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:tag</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">p</span> <span class="vi">@tag</span>
</span><span class='line'>  <span class="no">Instagram</span><span class="o">.</span><span class="n">tag_recent_media</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@tag</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">24</span><span class="p">})</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using jQuery, we iterate over the array parsing out the photo data we want from an object and throw it on the DOM.</p>

<p>Since loading the images can take a while, I have an animated gif show until the ajax pings me that it&rsquo;s done at which point the Instagram images load.</p>

<p>Once everything was working like it should, I added some minor styling using vanilla CSS.</p>

<p>It&rsquo;s simple and clean and works well too! I&rsquo;d like to convert it to a Foundation 5 layout.</p>

<p>Enter your hash tag below, let&rsquo;s go with puppies&hellip;
<img src="http://i.minus.com/i0huzXcA3PD3L.png" alt="" /></p>

<p>PUPPIES!!!!
<img src="http://i.minus.com/imFzAFaGG9uP3.png" alt="" /></p>

<p><strong>12:15am &ndash; Depart</strong></p>

<blockquote><p>It is not knowledge, but the act of learning, not possession, but the act of getting there which generates the greatest satisfaction.<br/>
&ndash; F. Gauss</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 3: Day 1 - Recent Tweets]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/03/phase-2-week-3-day-1-recent-tweets/"/>
    <updated>2014-03-03T22:49:43-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/03/phase-2-week-3-day-1-recent-tweets</id>
    <content type="html"><![CDATA[<p><strong>7:45am &ndash; Arrive</strong></p>

<p><strong>11:45pm &ndash; Depart</strong></p>

<blockquote><p>A common mistake people make when trying to design something completely foolproof is to underestimate the ingenuity of complete fools.<br/>
&ndash; D. Adams</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 2: Saturday]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/03/02/phase-2-week-2-saturday/"/>
    <updated>2014-03-02T01:40:15-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/03/02/phase-2-week-2-saturday</id>
    <content type="html"><![CDATA[<p><strong>11:45am &ndash; Arrive</strong></p>

<p>Work on Group project</p>

<p>and also portfolio challenge 7</p>

<p>our challenge:</p>

<p>Modify the shell code to implement the following functionality:</p>

<ul>
<li>Clicking on the &lsquo;Click Me&rsquo; button submits an AJAX request to the &lsquo;/colors&rsquo; route</li>
<li>return a JSON object the server with a random color and cell number</li>
<li>change the background color of the cell number returned to the color &ndash; WITHOUT MODIFYING THE HTML</li>
</ul>


<p>We use jQuery to put an event handler on the button, which has an ID &lsquo;#get_color&rsquo; on a click. Then we use AJAX to handle the action &ndash; by going to our controller and going to the correct route</p>

<p>and on success, a cell object is passed back and we act on all list items <li> and then with the .eq() method we constructs a new jQuery object from the element within that set, then we change the css of the background to a random color that&rsquo;s passed to us from the return value given to us from the controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#get_color&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/color&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;post&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cell</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">eq</span><span class="p">(</span><span class="nx">cell</span><span class="p">.</span><span class="nx">cell</span> <span class="o">-</span> <span class="mi">1</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;background&quot;</span><span class="p">,</span> <span class="nx">cell</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>what about the object that AJAX is returning?</p>

<p>We turn it into a JSON object!!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="s1">&#39;/color&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content_type</span> <span class="ss">:JSON</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">cell</span><span class="p">:</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">),</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;#&quot;</span> <span class="o">+</span> <span class="s2">&quot;%06x&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">rand</span> <span class="o">*</span> <span class="mh">0xffffff</span><span class="p">)}</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>1:00am &ndash; Depart</strong></p>

<blockquote><p>Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.<br/>
&ndash; M. Golding</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 2: Day 5 - Group Projects]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/28/phase-2-week-2-day-5-group-projects/"/>
    <updated>2014-02-28T22:41:51-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/28/phase-2-week-2-day-5-group-projects</id>
    <content type="html"><![CDATA[<p><strong>8:30am &ndash; Arrive</strong></p>

<p>Well, after that late night last night, I need to sleep. I could&rsquo;ve used another hour but I&rsquo;m excited for group projects.</p>

<p>picked our groups, I&rsquo;m pumped with ours, lots of potential and people with great strengths.</p>

<p>Our team name? THE ULTIMATE AMAZING SUPER BEST FRIENDS!</p>

<p>We design the database schema and then delegate tasks &ndash; we form an attack plan and keep communication open with stand-ups every couple hours. We use good git practices and use git pull/rebase before pushing a branch up, then we review eachother&rsquo;s code on pull requests.</p>

<p>A note on git rebasing&hellip; when you rebase and sort out a merge conflict, be sure you <code>git rebase --continue</code> to finish the actual rebasing process!!</p>

<p>We had a really really good flow going and while underpressure to deliver an MVP at 5pm, we had a good time. Hard to beat that kind of group dynamic.</p>

<p><img src="http://i.minus.com/ibxxX3gvDbu3jK.jpg" alt="" /></p>

<p><strong>11:20pm &ndash; Depart</strong></p>

<blockquote><p>Precise language is not the problem. Clear language is the problem.<br/>
&ndash; Richard Feynman</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 2: Day 4 - remake Hacker News]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/27/phase-2-week-2-day-4-remake-hacker-news/"/>
    <updated>2014-02-27T14:32:36-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/27/phase-2-week-2-day-4-remake-hacker-news</id>
    <content type="html"><![CDATA[<p><strong>8:20am &ndash; Arrive</strong></p>

<p>Hacker News jr</p>

<p>super busy and tired today &ndash; I will try to update this post, but probably won&rsquo;t have time to in the near future. I have to continue writing for future days, and I can already tell you it will be tough to find time to do it in the rigors of phase 2.</p>

<p><strong>1:10am &ndash; Depart</strong></p>

<blockquote><p>&hellip;and then it occurred to me that a computer is a stupid machine with the ability to do incredibly smart things, while computer programmers are smart people with the ability to do incredibly stupid things. They are, in short, a perfect match.<br/>
&ndash; B. Bryson</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 2: Day 3 - AJAX]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/26/phase-2-week-2-day-3-ajax/"/>
    <updated>2014-02-26T08:17:39-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/26/phase-2-week-2-day-3-ajax</id>
    <content type="html"><![CDATA[<p><strong>7:55am &ndash; Arrive</strong></p>

<p>Paired with Matthew today, a good session &ndash; we had steady progress through our AJAX challenges and that made me feel good.</p>

<h2>Portfolio Challenge 5 &ndash; Validations</h2>

<p>Using the ActiveRecord model to validate information meets certain criteria before saving it to the database.</p>

<p>Our mission:</p>

<p>Use ActiveRecord and Sinatra to allow anyone to create an event, so long as it passes validation rules.</p>

<p>Add validations to the Event model and show appropriate messages to the user when the validations fail.</p>

<p>Prevent Events from being saved when:</p>

<ul>
<li>The events date is empty, in the past, or is not valid.</li>
<li>The events title is already taken or empty.</li>
<li>The event organizers name is empty.</li>
<li>The event organizers email address is invalid.</li>
</ul>


<p>So, let&rsquo;s take a look at the tests I made in the model</p>

<figure class='code'><figcaption><span>app/models/event.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Event</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:organizer_name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:organizer_email</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:organizer_email</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="sr">/.+@.+\..+/i</span><span class="p">,</span> <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">&quot;is not valid&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:date</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># here we tell Active Record to check our OWN validation method/test</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validate</span>  <span class="ss">:valid_date?</span> <span class="c1"># calls the method below</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid_date?</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">date</span> <span class="o">&amp;&amp;</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">&gt;</span> <span class="n">date</span>   <span class="c1"># why is it only &#39;date&#39; and not &#39;:date&#39;??</span>
</span><span class='line'>     <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:date</span><span class="p">,</span> <span class="s1">&#39;Must be a valid date, IN THE FUTURE!&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look again at line 7</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:organizer_email</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="p">{</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="sr">/.+@.+\..+/i</span><span class="p">,</span> <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">&quot;is not valid&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There we check to make sure the format of <code>organizer_email</code> matches our <code>:with</code>, and then provide a custom error message as well.</p>

<p>The cool thing with Active Record is that it wraps all our error messages into a hash (in an object) when we fail validation tests upon an attempt to write to the database.</p>

<p>What can we do with these errors?  WE TELL THE USER, so they can correct the information and re-submit it.</p>

<p>Ok, so how do we do all that?</p>

<p>We grab the params we used from the new_event form.</p>

<p>We will try to create a new Event in the database using those params.</p>

<p>If it works, it works! If not, we will have an @event object which now contains a hash of errors from the failed validation tests.</p>

<p>To get to the errors, take a careful look at line <code>4</code>. We get the full_messages which is an array of error message strings.</p>

<figure class='code'><figcaption><span>app/controllers/index.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="s1">&#39;/events/create&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@params</span> <span class="o">=</span> <span class="n">params</span>
</span><span class='line'>  <span class="vi">@event</span> <span class="o">=</span> <span class="no">Event</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="vi">@params</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@errors</span> <span class="o">=</span> <span class="vi">@event</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span> <span class="k">unless</span> <span class="vi">@event</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="vi">@errors</span>
</span><span class='line'>      <span class="n">get</span> <span class="s1">&#39;/events/new&#39;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">get</span> <span class="s1">&#39;/events/#{@event.id}/show&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If there are errors, we want to direct the user back to the create_event page so they can have another attempt&hellip; and we&rsquo;ll be helpful and show them what information we need them to fix.</p>

<p>Since we assigned our errors to an instance variable, we have access to those when we redirect back to the create_event page! Time to use some erb and iterate through the array of messages</p>

<figure class='code'><figcaption><span>app/views/event_new.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>% if @errors %&gt;
</span><span class='line'><span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;</span> You have the following error(s): <span class="nt">&lt;/h3&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% @errors.each do |error| %&gt;
</span><span class='line'><span class="nt">&lt;li&gt;&lt;h4</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= error %&gt;<span class="nt">&lt;/h4&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/events/create&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>11:20pm &ndash; Depart</strong></p>

<blockquote><p>Some people, when confronted with a problem, think, “I know, I’ll use regular expressions.” Now they have two problems.<br/>
— Jamie Zawinksi</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 2: Day 2 - JavaScript Racer]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/25/phase-2-week-2-day-2-javascript-contd-dot-dot-dot/"/>
    <updated>2014-02-25T13:28:49-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/25/phase-2-week-2-day-2-javascript-contd-dot-dot-dot</id>
    <content type="html"><![CDATA[<p><strong>8:00 &ndash; Arrive</strong></p>

<h2><del>Ruby</del> JavaScript Racer</h2>

<p>Given a very basic HTML template, utilize JS to map out actions to events (in this case, keyboard presses) to then animate things in the view.</p>

<p>In the case of the keyboard, we only the action of only two keys &ndash; &lsquo;P&rsquo; for player 1, and &lsquo;Q&rsquo; for player 2.  We also don&rsquo;t want someone to be able to cheat and merely hold down a key and have their &ldquo;racer&rdquo; zoom across the screen at lightening speed. So we want <code>.keyup</code> which will act when a key is released. Perfecto.</p>

<p>We also need to change the position of our &lsquo;racer&rsquo; upon each key press. Here, we make use of the HTML template, and add a class to the sibling of the currently active cell. then we remove that class from the previous spot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">player1Movement</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span> <span class="o">==</span> <span class="mi">80</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">game_end</span><span class="p">()){</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#player1_strip .active&quot;</span><span class="p">).</span><span class="nx">next</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;active&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#player1_strip .active&quot;</span><span class="p">).</span><span class="nx">prev</span><span class="p">().</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;active&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>How do we know we are done? When the active cell is also the final cell in racetrack.</p>

<p>just check out line 2 in this code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">game_end</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#player1_strip .active&quot;</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">true</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.game_status&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;PLAYER 1 WINS!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#restart&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;block&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#fuck_yeah&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;block&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#player2_strip .active&quot;</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">true</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.game_status&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;PLAYER 2 WINS!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#restart&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;block&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#fuck_yeah&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;block&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the game finishes, we want to acknowledge that it finishes and then have a rematch button pop up.</p>

<p>The rematch button, we actually already have in the page.</p>

<p>Here&rsquo;s a snippet from the HTML file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">&quot;game_status&quot;</span><span class="nt">&gt;&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">id=</span><span class="s">&quot;restart&quot;</span><span class="nt">&gt;</span>Rematch!<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So to hide it, we just use CSS</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#restart</span> <span class="p">{</span> <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>How do we show it? If you paid extra special attention to how our game ends, you can pat yourself on the back. For everyone else, we use jQuery and capture the <code>#restart</code> id and then change the CSS method and use to change the property value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">game_end</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#player1_strip .active&quot;</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="kc">true</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.game_status&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s2">&quot;PLAYER 1 WINS!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#restart&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;display&quot;</span><span class="p">,</span> <span class="s2">&quot;block&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>JavaScript Racer &ndash; MVC</h2>

<p>We did this in the afternoon and used our Sinatra skeleton to get it to work.</p>

<p>We make a page to have our players enter their name &ndash; we provide a default in the case that a name isn&rsquo;t entered.</p>

<figure class='code'><figcaption><span>app/controllers/index.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="s1">&#39;/new_game&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:username1</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="p">?</span> <span class="n">player1</span> <span class="o">=</span> <span class="s2">&quot;Your mom&quot;</span>  <span class="p">:</span> <span class="n">player1</span><span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">params</span><span class="o">[</span><span class="ss">:username2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="p">?</span> <span class="n">player2</span> <span class="o">=</span> <span class="s2">&quot;Chuck Norris&quot;</span>  <span class="p">:</span> <span class="n">player2</span><span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username2</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we query the database to find or create a player of that name <code>User.find_or_create_by_username(player1)</code>. Then we add those values to the session to hold onto those User ID&rsquo;s so we can later write them to the database</p>

<figure class='code'><figcaption><span>app/controllers/index.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="vi">@player1</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_by_username</span><span class="p">(</span><span class="n">player1</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@player2</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_by_username</span><span class="p">(</span><span class="n">player2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:player1_id</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@player1</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>  <span class="n">session</span><span class="o">[</span><span class="ss">:player2_id</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@player2</span><span class="o">.</span><span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s time to start the game, we pass in the player_ids to the URL, as a way of saving which users are playing the game.</p>

<figure class='code'><figcaption><span>app/controllers/index.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">redirect</span> <span class="s2">&quot;/play_game/player1_id=</span><span class="si">#{</span><span class="vi">@player1</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">/player2_id=</span><span class="si">#{</span><span class="vi">@player2</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>11:00pm &ndash; Depart</strong></p>

<blockquote><p>I, myself, have had many failures and I&rsquo;ve learned that if you are not failing a lot, you are probably not being as creative as you could be &ndash; you aren&rsquo;t stretching your imagination.<br/>
&ndash; J. Backus</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 2: Day 1 - JavaScript]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/25/phase-2-week-2-day-1-javascript/"/>
    <updated>2014-02-25T13:24:24-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/25/phase-2-week-2-day-1-javascript</id>
    <content type="html"><![CDATA[<p><strong>8:00 &ndash; Arrive</strong></p>

<p>A morning lecture on the wonders of jQuery &hellip; and how we are to avoid at all costs crazy long chains of doing things in our code. We want to be thoughtful of the people who will read/edit our code in the future. So what do we do? Clean it up, then wrap it in a descriptive callback method!</p>

<p>jQuery is a JavaScript library that&rsquo;s supposed to simplify client side scripting of HTML. In English (well closer to English) that means it&rsquo;s easy to grab elements in the DOM, create animations and capture events (mouse clicks, keyboard actions, etc) and map those to different actions.  The <a href="http://api.jquery.com/">jQuery documentation</a> is very very thorough, and worth looking at if you want to learn more.</p>

<p>The syntax is kind of funky &ndash; it almost looks like chaining methods in Ruby&hellip; but on steroids.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//when the page is done loading do the function</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>  <span class="c1">//this captures all div tags &amp; has them fade out, 1000 is time in milliseconds</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above action could generically be written out as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// jQuery &quot;magic&quot;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if you wanted to chnage the background color of a class <code>.lead</code>, you&rsquo;d type</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.lead&quot;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;background-color&quot;</span><span class="p">,</span> <span class="s2">&quot;orange&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take a nice long look at what is in <code>" "</code>.</p>

<p>Wait, colors are too boring for you? Let&rsquo;s replace some boring images that are already in there</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;img&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;src&quot;</span><span class="p">,</span> <span class="s2">&quot;http://imgur.com/superamazingimage.jpg&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// if there are a ton of images and you only want to replace the first one</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;img:first&quot;</span><span class="p">)...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, bear with me, what if we wanted to select elements from the navbar and use the <code>.on()</code> method to bind an event handler on these elements?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.nav&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;mouseenter&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;background-color&quot;</span><span class="p">,</span> <span class="s2">&quot;#FF0000&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.nav&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;mouseleave&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;background-color&quot;</span><span class="p">,</span> <span class="s2">&quot;#FFFFFF&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s a micro-intro to jQuery. PSA: if you are actually a VIP in the insane chaining club for jQuery. Take a step back, remove your sunglasses, rip up that VIP card, and step into the light. Everything will be ok.</p>

<h2>JavaScript (JS)</h2>

<p>you don&rsquo;t always need jQuery though, Steven (one of our instructors and a fellow Longhorn) would argue that you don&rsquo;t ever need it.  And if you don&rsquo;t believe him, you can head on over to <a href="http://youmightnotneedjquery.com">youmightnotneedjquery.com</a>.</p>

<p>Our intro to JS is done in with OO in mind, using Ruby as a basis and taking our knowledge and logic from Ruby and applying it to JS.</p>

<p>What makes a Class a class?</p>

<ul>
<li>Initializer function</li>
<li>Attributes</li>
<li>Methods</li>
</ul>


<p>JavaScript has something akin to &ldquo;Open&rdquo; Classes, we open a class and bolt behavior onto it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Talker</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// like a class - it&#39;s a Constructor Function</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">word</span> <span class="o">=</span> <span class="nx">word</span><span class="p">;</span> <span class="c1">// instance method equivalent</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Talker</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// an Anonymous prototype</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hello &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">word</span><span class="p">);</span> <span class="c1">// behavior</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">en_espana</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Talker</span><span class="p">(</span><span class="s2">&quot;mundo&quot;</span><span class="p">);</span> <span class="c1">// instance of Talker</span>
</span><span class='line'><span class="nx">en_espana</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">en_la_france</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Talker</span><span class="p">(</span><span class="s2">&quot;le monde&quot;</span><span class="p">);</span> <span class="c1">// instance of Talker</span>
</span><span class='line'><span class="nx">en_la_france</span><span class="p">.</span><span class="nx">sayHello</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, that makes some kind of sense now doesn&rsquo;t it!?</p>

<h2>What about initialize methods in a class, Ruby has those, what about JS?</h2>

<p>If we look at tthis line, it is JS equivalent of an initialize method.  An instance of Talker is born with knowledge of #word.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">word</span> <span class="o">=</span> <span class="nx">word</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set Attributes</p>

<p>Define methods on the thing&rsquo;s prototype &ndash; this exactly what we did with <code>Talker.prototype.sayHello ...</code></p>

<p>Two ways to define an object in JS, with the object constructor or the literal syntax</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">anObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>  <span class="c1">// constructor</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">anotherObject</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1">// literal</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">anObject</span><span class="p">));</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">anotherObject</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Name spacing</h2>

<p>Take a look at these 2 methods, <code>.sin()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Trig</span><span class="p">.</span><span class="nx">sin</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Morality</span><span class="p">.</span><span class="nx">sin</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even without knowing anything about what they do, you can probably surmise that they do <em>very</em> different things. <strong>Name spacing</strong> allows us and the computer to organize things accordingly.  Yeah, it&rsquo;s important.</p>

<p><strong>10:45pm &ndash; Depart</strong></p>

<blockquote><p>The sole justification of teaching, of the school itself, is that the student comes out of it able to do something he could not do before. I say do and not know, because knowledge that doesn&rsquo;t lead to doing something new or doing something better is not knowledge at all.<br/>
&ndash; J. Barzun</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phase 2: Week 1 - Sunday Funday @ DBC]]></title>
    <link href="http://trekkie4life.github.io/blog/2014/02/23/phase-2-week-1-sunday-funday-at-dbc/"/>
    <updated>2014-02-23T22:41:04-08:00</updated>
    <id>http://trekkie4life.github.io/blog/2014/02/23/phase-2-week-1-sunday-funday-at-dbc</id>
    <content type="html"><![CDATA[<p><strong>11:00am &ndash; Arrive</strong></p>

<p>The CSS challenge: Editing only the CSS file, can we make a webpage identical to a given screenshot.</p>

<p>The answer: Yes, we can.</p>

<p>Moral of the story: CSS can be your best friend but one who likes to punch you in the face when you least expect it.</p>

<p><code>float</code> can mess some things up, use it sparingly.</p>

<p>Use Chrome Developer Tools, they are your best friend.</p>

<p>Ahhh, the beauty of CSS.</p>

<p><img src="http://4.bp.blogspot.com/-121N0L5IdA4/UJq-3XHuuAI/AAAAAAAAAwM/o1jA-2Zy0-g/s1600/css_is_awesome.gif" alt="CSS is awesome" /></p>

<p>Doh!</p>

<p><strong>9:30pm &ndash; Depart</strong></p>

<blockquote><p>Don&rsquo;t worry about people stealing your ideas. If your ideas are any good, you&rsquo;ll have to ram them down people&rsquo;s throats.<br/>
&ndash; H. Aiken</p></blockquote>
]]></content>
  </entry>
  
</feed>
